/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "keymap_french.h"

/ {
        combos {
                compatible = "zmk,combos";
        };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp ESC  &kp FR_EACU         &kp FR_DQUO     &kp FR_QUOT     &kp FR_LPRN                     &kp FR_MINS     &kp FR_EGRV  &kp FR_UNDS  &kp FR_CCED  &kp FR_AGRV  &kp BSPC                    
   &kp TAB      &kp Q           &kp W  &kp E    &kp R           &kp T                           &kp Y           &kp U        &kp I        &kp O        &kp P        &kp DEL
   &kp LSHIFT   &kp A           &kp S  &kp D    &kp F           &kp G                           &kp H           &kp J        &kp K        &kp L        &kp SEMI     &kp RALT
   &kp LCTRL    &kp Z           &kp X  &kp C    &kp V           &kp B                           &kp N           &kp FR_COMM  &kp FR_SCLN  &kp FR_COLN  &kp FR_EXLM  &kp ESC
                                                &kp ENT         &mo 1                           &mo 2           &kp SPACE
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp ESC  &kp FR_EACU         &kp FR_DQUO     &kp FR_QUOT     &kp FR_LPRN                     &kp FR_MINS     &kp FR_EGRV  &kp FR_UNDS  &kp FR_CCED  &kp FR_AGRV  &kp BSPC                    
   &kp TAB      &kp Q           &kp W  &kp E    &kp R           &kp T                           &kp Y           &kp U        &kp I        &kp O        &kp P        &kp DEL
   &kp LSHIFT   &kp A           &kp S  &kp D    &kp F           &kp G                           &kp H           &kp J        &kp K        &kp L        &kp SEMI     &kp RALT
   &kp LCTRL    &kp Z           &kp X  &kp C    &kp V           &kp B                           &kp N           &kp FR_COMM  &kp FR_SCLN  &kp FR_COLN  &kp FR_EXLM  &kp ESC
                                                &kp ENT         &mo 1                           &mo 2           &kp SPACE
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp ESC  &kp FR_EACU         &kp FR_DQUO     &kp FR_QUOT     &kp FR_LPRN                     &kp FR_MINS     &kp FR_EGRV  &kp FR_UNDS  &kp FR_CCED  &kp FR_AGRV  &kp BSPC                    
   &kp TAB      &kp Q           &kp W  &kp E    &kp R           &kp T                           &kp Y           &kp U        &kp I        &kp O        &kp P        &kp DEL
   &kp LSHIFT   &kp A           &kp S  &kp D    &kp F           &kp G                           &kp H           &kp J        &kp K        &kp L        &kp SEMI     &kp RALT
   &kp LCTRL    &kp Z           &kp X  &kp C    &kp V           &kp B                           &kp N           &kp FR_COMM  &kp FR_SCLN  &kp FR_COLN  &kp FR_EXLM  &kp ESC
                                                &kp ENT         &mo 1                           &mo 2           &kp SPACE
                        >;
                };      
        };
        conditional_layers {
                compatible = "zmk,conditional-layers";
                Layer3 {
                         if-layers = <1 2>;
                        then-layer = <3>;
                };
        };
};
